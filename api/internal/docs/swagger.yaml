basePath: / //no-lint.
definitions:
  handler.RegisterData:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
    type: object
  handler.accessTokenResponse:
    properties:
      accessToken:
        type: string
    type: object
  handler.emailCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handler.errResponse:
    properties:
      error:
        type: string
    type: object
  models.MoekDTO:
    properties:
      loadActual:
        type: number
      loadAvg:
        type: number
      loadHeating:
        type: number
      loadVent:
        type: number
      number:
        type: string
      point: {}
      polygon: {}
      src:
        type: string
      type:
        type: string
    type: object
  models.PropertyDTO:
    properties:
      globalID:
        type: integer
      point: {}
      polygon: {}
    type: object
host: api.larek.tech
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: BSD 3-Clause License
    url: https://raw.githubusercontent.com/EgorTarasov/true-tech/main/LICENSE
  termsOfService: http://swagger.io/terms/
  title: lct api
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: auth with email + password
      parameters:
      - description: user creds
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.emailCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.accessTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Auth with email creds
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: creating email account with FirstName and LastName
      parameters:
      - description: User Email
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.accessTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: creating email account
      tags:
      - auth
  /geo/moek:
    get:
      consumes:
      - application/json
      parameters:
      - description: longitude
        in: query
        name: longitude
        required: true
        type: number
      - description: latitude
        in: query
        name: latitude
        required: true
        type: number
      - description: radius
        in: query
        name: radius
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MoekDTO'
            type: array
      summary: третья тестовая ручка
      tags:
      - geo
  /geo/property:
    get:
      consumes:
      - application/json
      parameters:
      - description: longitude
        in: query
        name: longitude
        required: true
        type: number
      - description: latitude
        in: query
        name: latitude
        required: true
        type: number
      - description: radius
        in: query
        name: radius
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PropertyDTO'
            type: array
      summary: вторая тестовая ручка
      tags:
      - geo
  /geo/property/id/:object:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PropertyDTO'
      summary: тестовая ручка на проверку postgis
      tags:
      - geo
swagger: "2.0"
