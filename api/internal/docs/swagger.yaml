basePath: / //no-lint.
definitions:
  constants.Role:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - User
    - Admin
    - Moderator
  handler.RegisterData:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
    type: object
  handler.accessTokenResponse:
    properties:
      accessToken:
        type: string
    type: object
  handler.emailCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handler.errResponse:
    properties:
      error:
        type: string
    type: object
  handler.fileUploadResponse:
    properties:
      id:
        type: integer
    type: object
  handler.incidentCreateRequest:
    properties:
      priority:
        type: integer
      status:
        type: string
      title:
        type: string
    required:
    - priority
    - status
    - title
    type: object
  handler.predictionRequest:
    properties:
      admArea:
        type: string
      endDate:
        description: string in format dd-mm-yyyy
        type: string
      startDate:
        description: string in format dd-mm-yyyy
        type: string
      threshold:
        type: number
    required:
    - admArea
    - endDate
    - startDate
    - threshold
    type: object
  models.Address:
    properties:
      address:
        description: Полный Адрес в реестре.
        type: string
      border:
        description: Граница объекта на карте.
      center:
        allOf:
        - $ref: '#/definitions/models.Point'
        description: Центр объекта на карте.
      municipalDistrict:
        description: Район округ.
        type: string
      unom:
        description: Уникальный номер объекта недвижимости.
        type: integer
    required:
    - municipalDistrict
    type: object
  models.DisconnectionDTO:
    properties:
      actualDisconnectionDate: {}
      actualReconnectionDate: {}
      disconnectionType:
        type: string
      plannedDisconnectionDate: {}
      plannedReconnectionDate: {}
      reason:
        type: string
      registrationDate:
        type: string
      source:
        type: string
    type: object
  models.DispatchServices:
    properties:
      address:
        type: string
      centerAddress:
        type: string
      consumer:
        type: string
      consumerFullAddress:
        type: string
      consumerGroup:
        type: string
      country:
        type: string
      dispatchNumber:
        type: string
      externalID:
        type: integer
      heatDispatcherNumber:
        type: string
      unom:
        type: integer
      События:
        items:
          $ref: '#/definitions/models.Event'
        type: array
    type: object
  models.Event:
    properties:
      address:
        type: string
      country:
        type: string
      ended_at:
        type: string
      external_closed_at:
        type: string
      external_created_at:
        type: string
      external_ended_at:
        type: string
      src:
        type: string
      title:
        type: string
      unom:
        type: integer
    type: object
  models.Filter:
    properties:
      filterName:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  models.Graph:
    properties:
      name:
        type: string
      values:
        items:
          $ref: '#/definitions/models.GraphDataPoint'
        type: array
    type: object
  models.GraphDataPoint:
    properties:
      temp:
        type: number
      time:
        description: время (1 час, 3 часа и т.п.)
        type: integer
    type: object
  models.HeatingPoint:
    properties:
      balance_holder:
        type: string
      commissioning_date: {}
      consumer_full_address:
        $ref: '#/definitions/models.Address'
      consumers:
        items:
          $ref: '#/definitions/models.Address'
        type: array
      heating_point_full_address:
        $ref: '#/definitions/models.Address'
      heating_point_location_type:
        type: string
      heating_point_number:
        type: string
      heating_point_src:
        type: string
      heating_point_type:
        type: string
      mkd_consumers:
        items:
          $ref: '#/definitions/models.MKDConsumer'
        type: array
      municipal_district:
        type: string
      priority:
        type: integer
      state_consumers:
        items:
          $ref: '#/definitions/models.StateConsumer'
        type: array
      unom:
        type: integer
    type: object
  models.HeatingPointDTO:
    properties:
      balance_holder:
        type: string
      commissioning_date: {}
      consumer_full_address:
        $ref: '#/definitions/models.Address'
      consumers:
        items:
          $ref: '#/definitions/models.Address'
        type: array
      heating_point_full_address:
        $ref: '#/definitions/models.Address'
      heating_point_location_type:
        type: string
      heating_point_number:
        type: string
      heating_point_src:
        type: string
      heating_point_type:
        type: string
      mkd_consumers:
        items:
          $ref: '#/definitions/models.MKDConsumer'
        type: array
      municipal_district:
        type: string
      priority:
        type: integer
      state_consumers:
        items:
          $ref: '#/definitions/models.StateConsumer'
        type: array
      unom:
        type: integer
    type: object
  models.Incident:
    properties:
      closedAt:
        type: string
      createdAt:
        type: string
      dispatchServices:
        $ref: '#/definitions/models.DispatchServices'
      graph:
        $ref: '#/definitions/models.Graph'
      heatingPoint:
        $ref: '#/definitions/models.HeatingPoint'
      id:
        type: integer
      measurements:
        items:
          $ref: '#/definitions/models.Measurement'
        type: array
      mkdConsumer:
        items:
          $ref: '#/definitions/models.MKDConsumer'
        type: array
      openedAt:
        type: string
      priority:
        type: string
      relatedObjects:
        $ref: '#/definitions/models.UnomResult'
      stateConsumers:
        items:
          $ref: '#/definitions/models.StateConsumer'
        type: array
      status:
        type: string
      title:
        type: string
      unom:
        type: integer
      updatedAt:
        type: string
    type: object
  models.IncidentV1:
    properties:
      addressInEvent:
        type: string
      completed:
        description: "null"
        type: string
      description:
        type: string
      dispatchService:
        $ref: '#/definitions/models.DispatchServices'
      externalCompleted:
        type: string
      externalCreated:
        description: "null"
        type: string
      heatPoint:
        allOf:
        - $ref: '#/definitions/models.HeatingPoint'
        description: data from mongo
      id:
        description: data from incedent table
        type: integer
      kind:
        description: "null"
        type: string
      measurements:
        items:
          $ref: '#/definitions/models.Measurement'
        type: array
      mkdConsumers:
        items:
          $ref: '#/definitions/models.MKDConsumer'
        type: array
      predictedAt:
        description: "null"
        type: string
      predictionId:
        description: "null"
        type: integer
      regionName:
        type: string
      stateConsumers:
        items:
          $ref: '#/definitions/models.StateConsumer'
        type: array
      system:
        type: string
      unom:
        type: integer
      uploadId:
        description: "null"
        type: integer
    type: object
  models.MKDConsumer:
    properties:
      PassengerElevator:
        type: integer
      address:
        type: string
      apartments:
        type: integer
      country:
        type: string
      deprecation:
        type: number
      district:
        type: string
      entrances:
        type: integer
      externalID:
        type: integer
      feature:
        type: integer
      floors:
        type: integer
      fullAddress:
        type: string
      priority:
        type: integer
      projectSeries: {}
      roofCleaningSequence:
        type: integer
      roofMaterials:
        type: integer
      serviceElevator:
        type: integer
      state:
        type: integer
      totalArea:
        type: number
      totalLivingArea:
        type: number
      totalNonLivingArea: {}
      typesOfHousingStock:
        type: integer
      unom:
        type: integer
      wallMaterial:
        type: integer
      События:
        items:
          $ref: '#/definitions/models.Event'
        type: array
    type: object
  models.Measurement:
    properties:
      address:
        type: string
      consumer:
        description: Бюджет / МКД
        type: string
      coolantInput:
        type: number
      coolantOutput:
        type: number
      coolantSuppliedDifferenceLeakage:
        type: number
      datetime:
        type: string
      energyConsumption:
        type: number
      heatingPoint:
        type: string
      measurementDate:
        type: string
      measuringDeviceBrand:
        type: string
      measuringDeviceHours:
        type: number
      unom:
        type: integer
    type: object
  models.MoekDTO:
    properties:
      loadActual:
        type: number
      loadAvg:
        type: number
      loadHeating:
        type: number
      loadVent:
        type: number
      number:
        type: string
      point: {}
      polygon: {}
      src:
        type: string
      type:
        type: string
    type: object
  models.Point:
    properties:
      coordinates:
        items:
          type: number
        type: array
      type:
        type: string
    type: object
  models.PropertyDTO:
    properties:
      disconnections:
        items:
          $ref: '#/definitions/models.DisconnectionDTO'
        type: array
      globalID:
        type: integer
      point: {}
      polygon: {}
    type: object
  models.StateConsumer:
    properties:
      admDistrict:
        type: string
      area: {}
      floors: {}
      material:
        type: string
      municupalDistrict:
        type: string
      priority:
        type: integer
      propertyClass:
        type: string
      purpose:
        type: string
      type:
        type: string
      unom:
        type: integer
      События:
        items:
          $ref: '#/definitions/models.Event'
        type: array
    type: object
  models.StatePropertySearchResult:
    properties:
      address:
        description: Полный Адрес в реестре.
        type: string
      area: {}
      border:
        description: Граница объекта на карте.
      center:
        allOf:
        - $ref: '#/definitions/models.Point'
        description: Центр объекта на карте.
      class:
        type: string
      feature:
        type: string
      floors: {}
      municipalDistrict:
        description: Район округ.
        type: string
      purpose:
        type: string
      type:
        type: string
      unom:
        description: Уникальный номер объекта недвижимости.
        type: integer
    required:
    - municipalDistrict
    type: object
  models.UnomResult:
    properties:
      consumer:
        items:
          $ref: '#/definitions/models.MKDConsumer'
        type: array
      dispatchService:
        $ref: '#/definitions/models.DispatchServices'
      heatingPoint:
        $ref: '#/definitions/models.HeatingPoint'
      unom:
        type: integer
    type: object
  models.Upload:
    properties:
      createdAt:
        type: string
      filename:
        type: string
      id:
        type: integer
      status:
        type: string
      url:
        type: string
      userID:
        type: integer
    type: object
  token.UserPayload:
    properties:
      auth_type:
        type: string
      role:
        $ref: '#/definitions/constants.Role'
      user_id:
        type: integer
    type: object
host: api.lct.larek.tech
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: BSD 3-Clause License
    url: https://raw.githubusercontent.com/EgorTarasov/true-tech/main/LICENSE
  termsOfService: http://swagger.io/terms/
  title: lct api
  version: "1.0"
paths:
  /consumers/filters:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Filter'
              type: array
            type: array
      summary: получение списка всех фильтров для поиска по объектам
      tags:
      - search consumers
  /consumers/info/unoms:
    get:
      parameters:
      - collectionFormat: csv
        description: уникальные номера объектов
        in: query
        items:
          type: integer
        name: unoms
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: получение информации о потребителях по unoms
      tags:
      - consumers
  /consumers/q:
    get:
      consumes:
      - application/json
      parameters:
      - description: фильтры для поиска
        in: body
        name: filters
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Filter'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.HeatingPointDTO'
            type: array
      summary: поиск по объектам consumers с учетом фильтров
      tags:
      - search consumers
  /data/predict:
    post:
      consumes:
      - application/json
      parameters:
      - description: predictionRequest
        in: body
        name: predictionRequest
        required: true
        schema:
          $ref: '#/definitions/handler.predictionRequest'
      produces:
      - application/json
      responses: {}
      summary: получение предсказание аварийных ситуаций и информации об объекте
      tags:
      - data
  /geo/location/unom:
    get:
      parameters:
      - description: уникальный номер объекта
        in: query
        name: unom
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: получение гео данных по unom
      tags:
      - location
  /geo/location/unoms:
    get:
      parameters:
      - collectionFormat: csv
        description: уникальные номера объектов
        in: query
        items:
          type: integer
        name: unoms
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: получение гео данных по unoms
      tags:
      - location
  /geo/moek:
    get:
      consumes:
      - application/json
      parameters:
      - description: longitude
        in: query
        name: longitude
        required: true
        type: number
      - description: latitude
        in: query
        name: latitude
        required: true
        type: number
      - description: radius
        in: query
        name: radius
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MoekDTO'
            type: array
      summary: третья тестовая ручка
      tags:
      - geo
  /geo/property:
    get:
      consumes:
      - application/json
      parameters:
      - description: longitude
        in: query
        name: longitude
        required: true
        type: number
      - description: latitude
        in: query
        name: latitude
        required: true
        type: number
      - description: radius
        in: query
        name: radius
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PropertyDTO'
            type: array
      summary: вторая тестовая ручка
      tags:
      - geo
  /geo/property/id/:object:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PropertyDTO'
      summary: тестовая ручка на проверку postgis
      tags:
      - geo
  /issue/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: incidentCreateRequest
        in: body
        name: incidentCreateRequest
        required: true
        schema:
          $ref: '#/definitions/handler.incidentCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: создание инцидента
      tags:
      - issue
  /issue/heating-point/{unom}:
    get:
      parameters:
      - description: unom
        in: path
        name: unom
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Incident'
            type: array
      summary: получение информации об инцидетнах по уникальному номеру объекта
      tags:
      - issue
  /issue/id/{id}:
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Incident'
      summary: получение информации об инцидетне по его идентификатору
      tags:
      - issue
  /issue/list:
    get:
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Incident'
            type: array
      summary: получение информации об инцидетнах
      tags:
      - issue
  /issue/list/v1:
    get:
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.IncidentV1'
            type: array
      summary: получение информации об инцидетнах
      tags:
      - issue
  /search/objects:
    get:
      parameters:
      - description: поисковой запрос
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.StatePropertySearchResult'
              type: array
            type: array
      summary: поиск по объектам (потребителям) тепло энергии
      tags:
      - search
  /source/q/:unom:
    get:
      parameters:
      - description: уникальные номера объектов
        in: query
        name: unoms
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Address'
      summary: получение данных о ТП по уникальным номерам
      tags:
      - search consumers
  /users/file/list:
    get:
      description: list uploads
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Upload'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
      security:
      - Bearer: []
      summary: list uploads
      tags:
      - users
  /users/file/status/{id}:
    get:
      description: check file processing
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Upload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
      security:
      - Bearer: []
      summary: check file processing
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: users with email + password
      parameters:
      - description: user creds
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.emailCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.accessTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: Auth with email creds
      tags:
      - users
  /users/me:
    get:
      description: get user data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/token.UserPayload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
      security:
      - Bearer: []
      summary: get user data
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: creating email account with FirstName and LastName
      parameters:
      - description: User Email
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.accessTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
      summary: creating email account
      tags:
      - users
  /users/upload:
    post:
      consumes:
      - multipart/form-data
      description: upload file
      parameters:
      - description: key
        in: query
        name: key
        required: true
        type: string
      - description: file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.fileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errResponse'
      security:
      - Bearer: []
      summary: upload file
      tags:
      - users
swagger: "2.0"
